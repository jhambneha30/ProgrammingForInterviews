/* Longest non-overlapping repeating sub string
Example: ravindra
"ra" is the longest non-overlapping repeating sub string!

Method 1: Brute force
1. Find out all possible substrings of a string: O(n^2)
2. For every substring, find out whether this sub string is present as a part of the 
remaining string or not. This can be done using KMP algorithm -O(n)
3. Then find the longest repeating one -O(n^2)

TC=O(n^3) +O(n^2) =O(n^3)
==============================================================================================
Method 2: Using DP
Since the two strings have to be non overlapping, their end points have to be distinct.
Then, the first string's end point has to be before the second string's starting point.
If the last characters of the two sub strings are matching, it means that we have already
found out the strings of size 1. Now, we need to find out if the remaining strings are same
or not =>LS(i-1,j-1)

Result=max(LS(i,j)) =1+ LS(i-1,j-1) 				;if s[i]=s[j] && (j-i) > LS(i-1, j-1)
		    =1 								;if s[i]=s[j] and i-1<0
		    =0								;otherwise

NOTE: This problem is a bit different from other DP solutions because the brute force method
is not O(2^n) solution but O(n^3) solution.

The possible sub problems:
LS	(i      ,         j)
	0	,	  1...(n-1)  =>(n-1)
	1 	,	  2...(n-1)  =>(n-2)
	.
	.
  	(n-2)   ,	  1		 =>1
  Summing, we get O(n^2) sub problems

-----------------------------------Filling the table row wise------------------------
(0,0) = 0 (as two strings cannot be overlapping)
Similarly, the diagonal elements will be 0s for the same reason.

For other cells, if the last character is equal, write 1+value in(i-1,j-1)
If the last character is not equal, then put 0.

After the cells have been filled, find the max element in the matrix =>O(n^2)
Or keep track of max element while filling the table.
----------------------------------------------------------------------------------------

CORNER CASES: If the string is: 
					0 1 2 3 4
					a a a a a

If we have i=2 and j=4 =>the character matches, so we check i=1, j=3.
Again, the character matches, so we check i=0 and j=2. If we do not keep any check, our logic 
will also consider overlapping strings as the current j (=2) is same as the initial i.

So, when we compute LS(i,j) and fill the table, we should check that the maximum we can have 
is j-i. To avoid the second string crossing the first string's boundary, we use the below
condition

;if s[i]=s[j] && (j-i) > LS(i-1, j-1)

*/

#include <stdio.h>
#include <stdlib.h>

int main()
{
	
	return 0;
}



